                                    DICTIONARY

1.Add()
Adds a new key-value pair to the dictionary. If the key already exists, it throws an exception.

CODE:
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");
        Console.WriteLine("Product added successfully.");
    }
}


OUTPUT:
Product added successfully.



2.ContainsKey()
Checks if the dictionary contains a specific key. It returns true if the key exists, otherwise false.

Example:
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        if (products.ContainsKey(1))
        {
            Console.WriteLine("Key found in dictionary.");
        }
        else
        {
            Console.WriteLine("Key not found.");
        }
    }
}


OUTPUT:
Key found in dictionary.



3.Remove()
Removes the key-value pair with the specified key from the dictionary. It returns true if the key is found and removed, otherwise false.

EXAMPLE:
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        bool isRemoved = products.Remove(2);
        if (isRemoved)
        {
            Console.WriteLine("Product removed successfully.");
        }
        else
        {
            Console.WriteLine("Product not found.");
        }
    }
}


OUTPUT:
Product removed successfully.



4.TryGetValue()
Tries to get the value associated with the specified key. This method prevents exceptions if the key doesn't exist, and instead returns false.

EXAMPLE:
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {

        Dictionary<int, string> products = new Dictionary<int, string>();

        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        string productName;
        if (products.TryGetValue(1, out productName))
        {
            Console.WriteLine($"Product found: {productName}");
        }
        else
        {
            Console.WriteLine("Product not found.");
        }

        if (products.TryGetValue(3, out productName))
        {
            Console.WriteLine($"Product found: {productName}");
        }
        else
        {
            Console.WriteLine("Product not found.");
        }
    }
}


OUTPUT:
Product found: Laptop
Product not found.



5. Clear()
Removes all key-value pairs from the dictionary.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        products.Clear();
        Console.WriteLine("All products removed.");
    }
}

OUTPUT:
All products removed.



6. Count
Returns the number of key-value pairs in the dictionary. This is a property, not a method.

EXAMPLE:
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        Console.WriteLine($"Total products: {products.Count}");
    }
}

OUTPUT:
Total products: 2



7. Keys
Gets a collection of all the keys in the dictionary.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        foreach (int key in products.Keys)
        {
            Console.WriteLine($"Product ID: {key}");
        }
    }
}

OUTPUT:
Product ID: 1
Product ID: 2



8. Values
Gets a collection of all the values in the dictionary.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        foreach (string value in products.Values)
        {
            Console.WriteLine($"Product Name: {value}");
        }
    }
}

OUTPUT:
Product Name: Laptop
Product Name: Mobile



9. Indexer []
Allows direct access to dictionary elements using keys. You can use this to get or set values.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        Console.WriteLine(products[1]);
        products[1] = "Updated Laptop";
        Console.WriteLine(products[1]);
    }
}

OUTPUT:
Laptop
Updated Laptop



10. ContainsValue()
Checks if the dictionary contains a specific value.

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        Dictionary<int, string> products = new Dictionary<int, string>();
        products.Add(1, "Laptop");
        products.Add(2, "Mobile");

        if (products.ContainsValue("Laptop"))
        {
            Console.WriteLine("The product is available.");
        }
        else
        {
            Console.WriteLine("The product is not available.");
        }
    }
}

OUTPUT:
The product is available.

                                        LIST

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        // 1. Add() -  Adds an object to the end of the list.
        List<int> numbers = new List<int>();
        numbers.Add(5);
        numbers.Add(10);
        numbers.Add(15);
        Console.WriteLine("List after Add():");
        PrintList(numbers);

            //List after adding elements:1,2,3


        // 2. AddRange() - Adds the elements of the specified collection to the end of the list.
        List<int> moreNumbers = new List<int> { 20, 25 };
        numbers.AddRange(moreNumbers);
        Console.WriteLine("List after AddRange():");
        PrintList(numbers);

            //List after adding range:1,2,3,4,5,6


        // 3. Remove() - Removes the first occurrence of a specific object from the list
        numbers.Remove(10);  // Removes the first occurrence of 10
        Console.WriteLine("List after Remove(10):");
        PrintList(numbers);

           // List after removing 2:1,3,2,4


        // 4. RemoveAt() - Removes the element at the specified index.
        numbers.RemoveAt(2);  // Removes the element at index 2
        Console.WriteLine("List after RemoveAt(2):");
        PrintList(numbers);

           // List after removing element at index 1:1,3,4


        // 5. Insert() - Inserts an element into the list at the specified index.
        numbers.Insert(1, 30);  // Inserts 30 at index 1
        Console.WriteLine("List after Insert(30) at index 1:");
        PrintList(numbers);

               // List after inserting 2 at index 1:1,2,3,4

        // 6. Count - Returns the number of elements in the list
        int count = numbers.Count;
        Console.WriteLine("Number of elements in the list: " + count);

            //Number of elements in the list: 3


        // 7. Contains() - Determines whether the list contains a specific value.
        bool containsFive = numbers.Contains(5);
        Console.WriteLine("List contains 5: " + containsFive);

            //List contains 2: True


        // 8. IndexOf() - Returns the zero-based index of the first occurrence of a specific item in the list.
        int indexOfThirty = numbers.IndexOf(30);
        Console.WriteLine("Index of 30: " + indexOfThirty);

            //Index of 2: 1


        // 9. Clear() - Removes all elements from the list
        numbers.Clear();
        Console.WriteLine("List after Clear():");
        PrintList(numbers);  // Should print nothing, as the list is empty

            //List after clearing: 0


        // 10. Sort() - Sorts the elements in the entire list using the default comparer.
        numbers.AddRange(new List<int> { 3, 1, 4, 2 });
        numbers.Sort();  // Sorts the list
        Console.WriteLine("List after Sort():");
        PrintList(numbers);

            //Sorted list:1,2,3,4

    }
}


                                        ARRAYS

1.Sort
Sorts the elements in an array.
int[] numbers = { 3, 1, 4, 1, 5, 9 };
Array.Sort(numbers);
// numbers is now { 1, 1, 3, 4, 5, 9 }


2.Reverse
Reverses the order of elements in an array.
Array.Reverse(numbers);
// numbers is now { 9, 5, 4, 3, 1, 1 }


3.Array.Resize
Changes the size of an array.
Array.Resize(ref numbers, 10);
// numbers length is now 10


4.Array.IndexOf
Finds the index of a specific element.
int index = Array.IndexOf(numbers, 4);
// index is 2


5.Array.Copy
Copies elements from one array to another.
int[] destination = new int[5];
Array.Copy(numbers, destination, 5);
// destination contains the first 5 elements of numbers


6.Array.Clear
Clears the values of elements in an array.
Array.Clear(numbers, 0, numbers.Length);
// all elements in numbers are now 0


7.Array.Find
Finds the first element that matches a condition.
int[] numbers = { 3, 1, 4, 1, 5, 9 };
int result = Array.Find(numbers, element => element > 3);
// result is 4


8.Array.Exists:
Checks if any elements match a condition.
bool exists = Array.Exists(numbers, element => element > 6);
// exists is true


9.Array.FindAll:
Finds all elements that match a condition.
int[] results = Array.FindAll(numbers, element => element > 3);
// results is { 4, 5, 9 }


10.Array.TrueForAll:
Checks if all elements match a condition.
bool allGreaterThanZero = Array.TrueForAll(numbers, element => element > 0);
// allGreaterThanZero is true


11.Array.ForEach:
Applies an action to each element of an array.
Array.ForEach(numbers, element => Console.WriteLine(element));


12.Array.FindIndex:
Finds the index of the first element that matches a condition.
int index = Array.FindIndex(numbers, element => element > 3);
// index is 2


13.Array.FindLast:
Finds the last element that matches a condition.
int lastResult = Array.Find(numbers, element => element > 2);
// lastResult is 5 (assuming numbers were { 1, 2, 3, 4, 5 })


14.Array.FindLastIndex:
Finds the index of the last element that matches a condition.
int lastFindIndex = Array.FindLastIndex(numbers, element => element > 2);
// lastFindIndex is 4

                                        STRINGS

using System;

class Program
{
    static void Main()
    {
        string myString = "  Hello, World!  ";

        // string.Length: Gets the length of the string.  
        int length = myString.Length;       
        Console.WriteLine(length);             // 15
        
        // string.ToLower(): Converts all characters to lowercase.
        string lowercase = myString.ToLower();          
        Console.WriteLine(lowercase);         // "  hello, world!  "
       
       // string.ToUpper(): Converts all characters to uppercase.
        string uppercase = myString.ToUpper();      
        Console.WriteLine(uppercase);         // "  HELLO, WORLD!  "    

        // string.Trim(): Removes whitespace from the beginning and end.
        string trimmed = myString.Trim();                
        Console.WriteLine(trimmed);           // "Hello, World!"

        // string.Split(char[]): Splits the string into an array using specified delimiters.
        string[] splitString = myString.Split(new[] { ',' }); 
        Console.WriteLine(string.Join(", ", splitString)); // "  Hello", " World!  "

        // string.Join(string, IEnumerable<string>): Joins elements of a string array into a single string using a specified separator.
        string joinedString = string.Join(" - ", splitString);
        Console.WriteLine(joinedString);      // "  Hello -  World!  "

        // string.Replace(string, string): Replaces occurrences of a substring with another substring.
        string replacedString = myString.Replace("World", "C#");
        Console.WriteLine(replacedString);    // "  Hello, C#!  "

        // string.IndexOf(string): Returns the index of the first occurrence of a substring; returns -1 if not found.
        int indexOfSubstring = myString.IndexOf("lo"); 
        Console.WriteLine(indexOfSubstring);  // 8

        // string.StartsWith(string): Checks if the string starts with the specified prefix.
        bool startsWith = myString.StartsWith("  He");  
        Console.WriteLine(startsWith);        // True

        // string.EndsWith(string): Checks if the string ends with the specified suffix.
        bool endsWith = myString.EndsWith("!");        
        Console.WriteLine(endsWith);          // True          
       
        
    }
}
